// Copyright 2023 Estefania Montero Navarro <estefania.monteronavarro@ucr.ac.cr>

#include <inttypes.h>
#include <pthread.h>
#include <zip.h>

#include "definitions.h"
#include "queue.h"

// TYPE DECLARATIONS
/**
 * @struct password_information_t
 * 
 * @brief  General information about all the passwords
 * 
*/
typedef struct password_information {
  uint64_t max_pass_length;  ///< maximum size of the possible passwords
  char* pass_alphabet;  ///< characters that the password may contain
  uint64_t pass_counter;  ///< amount of passwords that should be found
  uint64_t alphabet_size;  ///< amount of possible characters
  #if ZIPPASS_PTHREAD
  uint64_t thread_amount;  ///< amount of available threads
  #endif
} password_information_t;

/**
 * @struct zip_password_t
 * 
 * @brief  Information of each specific zip
 * 
*/
typedef struct zip_password {
  char* file_path;  ///< relative path of the zip file
  char* password;  ///< password of this zip file
  #if ZIPPASS_SERIAL
  zip_t* zip_file;  ///< zip file
  #endif
  pthread_mutex_t can_access_password_found;  ///< Mutex for password_found
  pthread_mutex_t zip_mutex;  ///< Mutex to be used for zip_open
  uint64_t password_found;  ///< indicates if the password has been found
  password_information_t* password_info;  ///< points to a password_information
  struct zip_password_t* next_zip;  ///< points to next zip_password instance
} zip_password_t;

#if ZIPPASS_PTHREAD
/**
 * @struct pass_thread_data
 * 
 * @brief Temporary data set to be passed to each thread
 * 
*/
typedef struct pass_thread_data {
  uint64_t current_size;  ///< Current size being generated
  uint64_t comb_ini;  ///< First size to be generetaed by this thread
  uint64_t comb_end;  ///< Last size to be generated by this thread
  queue_t* passwords_queue;  ///< Queue for passwords generated
  password_information_t* pass_info;  ///< Pointer to password information
  zip_password_t* zip_password;  ///< Pointer to password information
} pass_thread_data_t;

/**
 * @struct check_thread_data
 * 
 * @brief Temporary data set to be passed to each thread
*/
typedef struct check_thread_data {
  queue_t* passwords_queue;  ///< Queue for passwords generated
  zip_password_t* zip_password;  ///< Pointer to password information
  zip_t* zip_file;  ///< zip file
  char* file_path;  ///< Array of file paths
} check_thread_data_t;
#endif
