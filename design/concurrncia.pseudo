declare structure temp_data
  current_size
  comb_ini
  comb_end
  temp_file_path
  zip_password
end declaration

procedure get_thread_amount(argc, argv[])
  if (argc > 1)
    thread_amount = pass_to_int(argv[1])
  else
    thread_amount = max_thread_amount
  end if
end procedure

procedure find_password(zip_password)
    temp_data = create_temp_data(thread_amount, zip_password)
    if (!temp_data)
      thread_amount = alphabet_size
      temp_data = create_temp_data(thread_amount, zip_password)
    end if
    run_threads(thread_amount, temp_data);//ACA
    erase_temp_data(temp_data, thread_amount)
end procedure

procedure create_temp_data(data_amount, zip_password) //C
  temp_data_arr = create temp_data_dynamic_array // Check de alloc
  for (i=0...data_amount)
  temp_file_path = "temp_dest/"+i
  current_file = create_temp_file(zip_password:file_path,temp_file_pat)
    temp_data_arr[i]:
      temp_file_path = current_file
      zip_password = zip_password
  end for
  return temp_data_arr
end procedure

procedure create_temp_file(file_path,source_file)
  open(source_file)
  create(dest_file)
  file_size = get_file_size(source_file)
  buf = dynamic_buffer(file_size)
  read_file(source_file, buf)
  write_file(buf, dest_file)
  delete buf
  close(dest_file)
  close(source_file)
  // Ckeck de alloc
end procedure

procedure run_threads(rutine, team_size, temp_data) 
  threads = thread_dynamic_array(team_size)
  for size := 1 ... max_size
    len_elev = len_elev(alphabet_count,size)
    distribute_combinations(temp_data, len_elev)
    for (i = 0...team_size)
      threads[create_thread(look_for_password, temp_data[i])]
    end for
    for (i = 0...team_size)
      join_thread(threads[i])
    end for
  end for
 
end procedure

procedure distribute_combinations(temp_data, total_combos, size)
  distribution = thread_amount / total_combos
  rest = thread_amount % total_combos
  comb_ini = 0
  for (i=0 to thread_amount)
    temp_data[i]:
    current_size = size
    comb_ini = comb_ini
    comb_end = comb_ini + distribution
    if (i < rest) {
      ++comb_end
    }
    comb_ini = comb_end
  end for
end procedure

procedure look_for_password(temp_data)//C
    for combination = comb_ini to comb_end 
      num_array[size]
      transform_number_base(combination,size,alphabet_count,num_array)
      password = transform_number_to_pass(alphabet,num_array,size)
      if (try_password(file,num_array))
        size = max_pass_length
        combination = len_elev
        file = open_zip()
        for size := 1 hasta max_pass_length
          len_elev = len_elev(alphabet_count,size)
          for combination = 0 hasta len_elev
            num_array[size]
            transform_number_base(combination,size,alphabet_count,num_array)
            password = transform_number_to_pass(alphabet,num_array,size)
            if (try_password(file,num_array)) {
              size = max_pass_length
              combination = len_elev
              lock(password_found_mutex)
              password_found = 1
              lock(password_mutex)
                zip_password = password
              unlock(password_mutex)
              unlock(password_found_mutex)
            }
          end for
        end for
      end if
    end for
end procedure

procedure password_found()
  lock(password_found_mutex)
    found = password_found
  unlock(password_found_mutex)
  return found
end procedure

procedure erase_temp_data(temp_data, data_amount)
  for (i = 0 ... data_amount)
    erase_file(temp_file_path)
  end for
    delete temp_data
end procedure